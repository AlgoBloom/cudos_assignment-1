/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, Config, ExecuteMsg, InstantiateMsg, QueryMsg, ReplyResponse, ReplyInfo, Reply } from "./Messaging.types";
export interface MessagingReadOnlyInterface {
  contractAddress: string;
  getReplies: () => Promise<GetRepliesResponse>;
  getGreeting: () => Promise<GetGreetingResponse>;
}
export class MessagingQueryClient implements MessagingReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getReplies = this.getReplies.bind(this);
    this.getGreeting = this.getGreeting.bind(this);
  }

  getReplies = async (): Promise<GetRepliesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_replies: {}
    });
  };
  getGreeting = async (): Promise<GetGreetingResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_greeting: {}
    });
  };
}
export interface MessagingInterface extends MessagingReadOnlyInterface {
  contractAddress: string;
  sender: string;
  respond: ({
    response
  }: {
    response: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  reset: ({
    text
  }: {
    text: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MessagingClient extends MessagingQueryClient implements MessagingInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.respond = this.respond.bind(this);
    this.reset = this.reset.bind(this);
  }

  respond = async ({
    response
  }: {
    response: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      respond: {
        response
      }
    }, fee, memo, funds);
  };
  reset = async ({
    text
  }: {
    text: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      reset: {
        text
      }
    }, fee, memo, funds);
  };
}